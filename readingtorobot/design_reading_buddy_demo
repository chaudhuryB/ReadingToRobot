#!/usr/bin/python
"""
    Demo for `Design Reading Buddy` study.

    This script can be used to start the robots individually.
    Usage:

    read_to_robot [-h] {nao,miro,cozmo} [--mqttIP MQTTIP] [--options] ...

"""


import argparse
import logging
import os
import sys
import qi
import time
from naoqi import ALProxy
from readingtorobot.NAO.nao_base import NAOBase
from readingtorobot.common import MQTTManager
from readingtorobot.NAO.nao_expression import look_at_book, look_left, look_right, hold_book


def main(args):
    # Check and create logs folder
    if not os.path.exists('~/logs'):
        os.makedirs('~/logs')

    logging.basicConfig(format="%(asctime)s:%(levelname)s:\033[32m%(name)s\033[0m: %(message)s",
                        level=logging.DEBUG,
                        filename="~/logs/nao.log",
                        filemode="a")

    motion = ALProxy("ALMotion", args.robotIP, args.port)

    try:
        # Initialize qi framework.
        connection_url = "tcp://" + args.robotIP + ":" + str(args.port)
        app = qi.Application(["HumanListener", "--qi-url=" + connection_url])
    except RuntimeError:
        print("Can't connect to Naoqi at ip \"" + args.robotIP + "\" on port " + str(args.port) + ".\n"
              "Please check your script arguments. Run with -h option for help.")
        sys.exit(1)

    motion.wakeUp()

    reader_robot = NAOBase(app)
    mqtt_manager = MQTTManager('nao', reader_robot.stop, server_ip=args.mqttIP)

    # Start reading
    reader_robot.movement.wakeUp()
    reader_robot.posture.goToPosture('Crouch', 2.0)
    reader_robot.movement.setStiffnesses("Body", 1.0)
    mqtt_manager.start()

    reader_robot.do_action(*hold_book())

    raw_input("NAO is ready to hold the book now. Place the book correctly and press enter to continue...")

    # 1. Look left and right (to one robot and another)
    reader_robot.do_action(*look_left())
    reader_robot.do_action(*look_right())
    # 2. Look at book.
    reader_robot.do_action(*look_at_book())
    # 3. Read 2 sentences.
    reader_robot.tts.say("My mum has to get the bus to her job.")
    reader_robot.tts.say("Her job is at the vet.")

    time.sleep(3)
    reader_robot.tts.say("She got on it. She cannot sit.")
    # 4. Trigger reaction in other robots.
    mqtt_manager.publish("speech/cmd", "groan")
    time.sleep(3)
    # 3. Read 2 sentences.
    reader_robot.tts.say("The man got up for my mum.")
    reader_robot.tts.say("The man has his pet dog on the bus.")
    # 4. Trigger reaction in other robots.
    mqtt_manager.publish("speech/cmd", "happy")

    # Wrap up:
    time.sleep(3)
    mqtt_manager.publish("cozmo/stop", "stop")
    mqtt_manager.publish("miro/stop", "stop")

    raw_input("Please remove the book from NAO and press enter to continue...")

    reader_robot.stop()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    # NAO specific arguments
    parser.add_argument("--mqttIP", type=str, default=None, help="Ip of speech server.")
    parser.add_argument("--robotIP", type=str,  default="127.0.0.1",
                        help="IP address of the robot, use 'localhost' for virtual Nao in Choregraphe")
    parser.add_argument("--port", type=int,  default="9559",
                        help="Needed for connecting to virtual Choregraphe Nao")

    main(parser.parse_args())
